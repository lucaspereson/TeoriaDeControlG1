#include <AccelStepper.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ArduinoJson.h>

#define IN1 D0
#define IN2 D1
#define IN3 D2
#define IN4 D3
#define R D4
#define G D5
#define B D6
#define sensor_inc D7
#define eje_x A0

int valor_inc = 0;
int valor_x = 0;
String valor_x_pasaje = "";
AccelStepper motor(AccelStepper::HALF4WIRE, IN1, IN3, IN2, IN4);
const int stepsPerRevolution = 4096;
int velocidad_actual = 500;
float motor_pasaje ;
int velocidad_apagado = 0;

const char *ssid = "wfrre";
const char *password = "BityAtomo";

ESP8266WebServer server(80);

void setup() {
  pinMode(R, OUTPUT);
  pinMode(G, OUTPUT);
  pinMode(B, OUTPUT);
  pinMode(eje_x, INPUT);
  pinMode(sensor_inc, INPUT);
  Serial.begin(115200);
  motor.setMaxSpeed(velocidad_actual);
  motor.setAcceleration(200);
  motor.move(stepsPerRevolution);

  // Con√©ctate a la red Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(250);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("");
  Serial.println("**");
  Serial.print("Conectado a la red WiFi: ");
  Serial.println(WiFi.SSID());
  Serial.print("IP: ");
  Serial.println(WiFi.localIP());
  Serial.print("macAdress: ");
  Serial.println(WiFi.macAddress());
  Serial.println("***");

  // Configura las rutas de manejo de las solicitudes HTTP
  server.on("/", HTTP_GET, handleRoot);

  // Inicia el servidor HTTP
  server.begin();
}

void loop() {
  //Lectura de sensor de inclinacion
  valor_inc = digitalRead(sensor_inc);
  valor_inc = valor_inc * 180 + 90;

  //Lectura de sensor basculante biaxial
  valor_x = analogRead(eje_x);

  funcionamiento_motor();
  server.handleClient(); // Maneja las solicitudes HTTP
  delay(5);
}

void handleRoot() {
  //Lectura de sensor de inclinacion
  valor_inc = digitalRead(sensor_inc);
  valor_inc = valor_inc * 180 + 90;

  //Lectura de sensor basculante biaxial
  valor_x = analogRead(eje_x);

  //Conversion para pasar el cliente http
  calculoPasaje();

  //Armado de documento json
  String inc="Inclinacion";
  String motor = "Motor";
  String potenciometro = "Ubi_Potenciometro";
  
  StaticJsonDocument<200> jsonDoc;
  jsonDoc[inc] = valor_inc;
  jsonDoc[motor] = motor_pasaje;
  jsonDoc[potenciometro] = valor_x_pasaje;

  String response;
  serializeJson(jsonDoc, response);
  server.send(200, "application/json", response);
}

void calculoPasaje() {
  //Pasaje del potenciometro
  if (valor_x > 1000) {
    valor_x_pasaje = "ARRIBA";
  } else {
    if (valor_x < 100) {
      valor_x_pasaje = "ABAJO";
    } else {
      valor_x_pasaje = "NEUTRO";
    }
  }  

  //Pasaje de velocidad del motor
  if (valor_inc == 90) {
    motor_pasaje = (velocidad_actual*60)/stepsPerRevolution;
  } else {
    motor_pasaje = 0;
  };
}

void funcionamiento_motor(){
  //motor
  if (valor_inc < 270){
    motor.run();
    motor.move(stepsPerRevolution);
    if (valor_x > 1000){
      if (velocidad_actual < 1000) {
        velocidad_actual = velocidad_actual + 100 ;
        motor.setMaxSpeed(velocidad_actual);
        digitalWrite(R, 0);
        digitalWrite(G, 2);
        digitalWrite(B, 0);
        delay(300);
        digitalWrite(R, 0);
        digitalWrite(G, 0);
        digitalWrite(B, 0);
      };
      if (velocidad_actual == 1000) {
        digitalWrite(R, 2);
        digitalWrite(G, 2);
        digitalWrite(B, 2);
        };
    }
    else{
      if (valor_x < 100){
        if (velocidad_actual > 0) {  
          velocidad_actual = velocidad_actual - 100;
          motor.setMaxSpeed(velocidad_actual);
          digitalWrite(R, 0);
          digitalWrite(G, 0);
          digitalWrite(B, 2);
          delay(300);
          digitalWrite(R, 0);
          digitalWrite(G, 0);
          digitalWrite(B, 0);
        };
        if (velocidad_actual == 0){
          digitalWrite(R, 2);
          digitalWrite(G, 0);
          digitalWrite(B, 0);
        };
      }
    }
  }
}
